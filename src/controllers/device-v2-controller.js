// Generated by CoffeeScript 2.4.1
var DeviceV2Controller, JobToHttp, _, debug;

JobToHttp = require('../helpers/job-to-http');

debug = require('debug')('meshblu-core-protocol-adapter-http:get-device-controller');

_ = require('lodash');

DeviceV2Controller = class DeviceV2Controller {
  constructor({jobManager, jobToHttp}) {
    this.get = this.get.bind(this);
    this.update = this.update.bind(this);
    this.updateDangerously = this.updateDangerously.bind(this);
    this.findAndUpdate = this.findAndUpdate.bind(this);
    this.jobManager = jobManager;
    this.jobToHttp = jobToHttp;
  }

  get(req, res) {
    var job;
    job = this.jobToHttp.httpToJob({
      jobType: 'GetDevice',
      request: req,
      toUuid: req.params.uuid
    });
    debug('dispatching request', job);
    return this.jobManager.do(job, (error, jobResponse) => {
      var data, jsonError, ref, ref1;
      if ((error == null) && ((ref = jobResponse.metadata) != null ? ref.code : void 0) === 403) {
        error = {
          code: 404,
          message: 'Devices not found'
        };
      }
      if (error != null) {
        if (error.code === 403) { // backwards compatibility with meshblu
          error.code = 404;
          error.message = 'Devices not found';
        }
        jsonError = {
          code: error.code,
          message: error.message
        };
        return res.status((ref1 = error.code) != null ? ref1 : 500).send(jsonError);
      }
      data = JSON.parse(jobResponse.rawData);
      if (data == null) {
        jsonError = {
          code: 404,
          message: 'Devices not found'
        };
        return res.status(404).send(jsonError);
      }
      return this.jobToHttp.sendJobResponse({res, jobResponse});
    });
  }

  update(req, res) {
    var body, job;
    // insert $set first
    if (!_.isPlainObject(req.body)) {
      return res.status(422).send({
        message: 'Invalid Request'
      });
    }
    body = req.body;
    delete body.uuid;
    delete body.token;
    req.body = {
      $set: body
    };
    job = this.jobToHttp.httpToJob({
      jobType: 'UpdateDevice',
      request: req,
      toUuid: req.params.uuid
    });
    debug('dispatching request', job);
    return this.jobManager.do(job, (error, jobResponse) => {
      if (error != null) {
        return res.sendError(error);
      }
      return this.jobToHttp.sendJobResponse({res, jobResponse});
    });
  }

  updateDangerously(req, res) {
    var job;
    job = this.jobToHttp.httpToJob({
      jobType: 'UpdateDevice',
      request: req,
      toUuid: req.params.uuid
    });
    debug('dispatching request', job);
    return this.jobManager.do(job, (error, jobResponse) => {
      if (error != null) {
        return res.sendError(error);
      }
      return this.jobToHttp.sendJobResponse({res, jobResponse});
    });
  }

  findAndUpdate(req, res) {
    var job;
    job = this.jobToHttp.httpToJob({
      jobType: 'FindAndUpdateDevice',
      request: req,
      toUuid: req.params.uuid
    });
    debug('dispatching request', job);
    return this.jobManager.do(job, (error, jobResponse) => {
      if (error != null) {
        return res.sendError(error);
      }
      return this.jobToHttp.sendJobResponse({res, jobResponse});
    });
  }

};

module.exports = DeviceV2Controller;
