// Generated by CoffeeScript 2.4.1
var JobToHttp, SubscriptionsController, _, debug;

debug = require('debug')('meshblu-core-protocol-adapter-http:subscription-controller');

_ = require('lodash');

JobToHttp = require('../helpers/job-to-http');

SubscriptionsController = class SubscriptionsController {
  constructor({jobManager, jobToHttp}) {
    this.list = this.list.bind(this);
    this.create = this.create.bind(this);
    this.remove = this.remove.bind(this);
    this.removeMany = this.removeMany.bind(this);
    this.jobManager = jobManager;
    this.jobToHttp = jobToHttp;
  }

  list(req, res) {
    var job;
    job = this.jobToHttp.httpToJob({
      jobType: 'SubscriptionList',
      request: req,
      toUuid: req.params.uuid
    });
    return this.jobManager.do(job, (error, jobResponse) => {
      if (error != null) {
        return res.sendError(error);
      }
      if (jobResponse == null) {
        return res.sendError(new Error('Did not receive jobResponse'));
      }
      return this.jobToHttp.sendJobResponse({jobResponse, res});
    });
  }

  create(req, res) {
    var job;
    req.body = _.pick(req.params, ['subscriberUuid', 'emitterUuid', 'type']);
    job = this.jobToHttp.httpToJob({
      jobType: 'CreateSubscription',
      request: req,
      toUuid: req.params.subscriberUuid
    });
    return this.jobManager.do(job, (error, jobResponse) => {
      if (error != null) {
        return res.sendError(error);
      }
      if (jobResponse == null) {
        return res.sendError(new Error('Did not receive jobResponse'));
      }
      if (jobResponse.metadata.code === 304) {
        jobResponse.metadata.code = 204;
      }
      if (jobResponse.metadata.code === 201) {
        jobResponse.metadata.code = 204;
      }
      return this.jobToHttp.sendJobResponse({jobResponse, res});
    });
  }

  remove(req, res) {
    var job;
    req.body = _.pick(req.params, ['subscriberUuid', 'emitterUuid', 'type']);
    job = this.jobToHttp.httpToJob({
      jobType: 'RemoveSubscription',
      request: req,
      toUuid: req.params.subscriberUuid
    });
    return this.jobManager.do(job, (error, jobResponse) => {
      if (error != null) {
        return res.sendError(error);
      }
      if (jobResponse == null) {
        return res.sendError(new Error('Did not receive jobResponse'));
      }
      return this.jobToHttp.sendJobResponse({jobResponse, res});
    });
  }

  removeMany(req, res) {
    var job;
    req.body = _.pick(req.body, ['emitterUuid', 'type']);
    job = this.jobToHttp.httpToJob({
      jobType: 'RemoveSubscriptions',
      request: req,
      toUuid: req.params.subscriberUuid
    });
    return this.jobManager.do(job, (error, jobResponse) => {
      if (error != null) {
        return res.sendError(error);
      }
      if (jobResponse == null) {
        return res.sendError(new Error('Did not receive jobResponse'));
      }
      return this.jobToHttp.sendJobResponse({jobResponse, res});
    });
  }

};

module.exports = SubscriptionsController;
