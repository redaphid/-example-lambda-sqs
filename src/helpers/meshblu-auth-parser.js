// Generated by CoffeeScript 2.4.1
var MeshbluAuthParser, _;

_ = require('lodash');

MeshbluAuthParser = class MeshbluAuthParser {
  constructor() {
    this.parse = this.parse.bind(this);
    this.parseAuthorizationHeader = this.parseAuthorizationHeader.bind(this);
    this.parseMeshbluAuthHeaders = this.parseMeshbluAuthHeaders.bind(this);
    this.parseSkynetAuthHeaders = this.parseSkynetAuthHeaders.bind(this);
    this.parseExtraHeaders = this.parseExtraHeaders.bind(this);
    this.parseHeader = this.parseHeader.bind(this);
  }

  parse(request) {
    var authPair;
    authPair = this.parseAuthorizationHeader(request);
    if (authPair == null) {
      authPair = this.parseMeshbluAuthHeaders(request);
    }
    if (authPair == null) {
      authPair = this.parseSkynetAuthHeaders(request);
    }
    if (authPair == null) {
      authPair = this.parseExtraHeaders(request);
    }
    if (authPair == null) {
      authPair = {
        uuid: void 0,
        token: void 0
      };
    }
    authPair.as = request.header('x-meshblu-as');
    return authPair;
  }

  parseAuthorizationHeader(request) {
    var encodedToken, scheme, token, uuid;
    if (!request.header('authorization')) {
      return;
    }
    [scheme, encodedToken] = request.header('authorization').split(' ');
    [uuid, token] = new Buffer(encodedToken, 'base64').toString().split(':');
    if (!((uuid != null) && (token != null))) {
      return;
    }
    return {
      uuid: _.trim(uuid),
      token: _.trim(token)
    };
  }

  parseMeshbluAuthHeaders(request) {
    return this.parseHeader(request, 'meshblu_auth_uuid', 'meshblu_auth_token');
  }

  parseSkynetAuthHeaders(request) {
    return this.parseHeader(request, 'skynet_auth_uuid', 'skynet_auth_token');
  }

  parseExtraHeaders(request) {
    return this.parseHeader(request, 'X-Meshblu-UUID', 'X-Meshblu-Token');
  }

  parseHeader(request, uuidHeader, tokenHeader) {
    var token, uuid;
    if (!(request.header(uuidHeader) && request.header(tokenHeader))) {
      return;
    }
    uuid = _.trim(request.header(uuidHeader));
    token = _.trim(request.header(tokenHeader));
    if (!((uuid != null) && (token != null))) {
      return;
    }
    return {uuid, token};
  }

};

module.exports = MeshbluAuthParser;
